#This script is a sub of termpointtognb.mos and cannot be used on it's own!


#*********Initial variables**********************
$linecontent = readfile(pathtotermpointtognb_mos)
$path = $linecontent[1]
$xtwonotcreatedonenbside = 0
#*********Initial variables**********************

l+ $path/log/enbsub.log
lt all

func result
	get $xtwoldn operationalState > $xtwoopstenbside
	if $nr_of_mos = 0
		$xtwonotcreatedonenbside = 1
	fi
endfunc

func fetchdataforxtwo
	$lineContent = readfile($path/tmp/gnbdata[$sequence].txt)
	$gnbouteraddress =	$lineContent[5]
	$gnbinneraddress =	$lineContent[6]
	$gnbupaddress = 	$lineContent[7]
endfunc

func xtwocr
	crn $xtwoldn
	end
	set $xtwoldn ipAddress $gnbinneraddress
	set $xtwoldn upIpAddress $gnbupaddress
	set $xtwoldn ipsecEpAddress $gnbouteraddress
	set $xtwoldn administrativeState 1
endfunc

func xtwocheck
	fetchdataforxtwo
	ma xtwo TermPointToGNB= ^ipAddress $gnbinneraddress$
	if $nr_of_mos > 0
		for $mo in xtwo
			$xtwoldn = ldn($mo)
		done
	else
		$xtwoldn = $extgnbfldn,TermPointToGNB=$gNodeBPlmnId[mcc]$gNodeBPlmnId[mnc]-$gNodeBId
	fi
	
	pr $xtwoldn
	if $nr_of_mos = 0
		xtwocr
	fi
endfunc

func fetchdataforextgnbf
	$lineContent = readfile($path/tmp/gnbdata[$sequence].txt)
	$gNodeBId =				$lineContent[1]
	$gNodeBIdLength =		$lineContent[2]
	$gNodeBPlmnId[mcc] =	$lineContent[3]
	$gNodeBPlmnId[mnc] =	$lineContent[4]
endfunc

func extgnbfcr
	$extgnbfldn = $gutranwldn,ExternalGNodeBFunction=$gNodeBPlmnId[mcc]$gNodeBPlmnId[mnc]-$gNodeBId
	crn $extgnbfldn
	gNodeBId $gNodeBId
	gNodeBIdLength $gNodeBIdLength
	gNodeBPlmnId $gNodeBPlmnId
	end
endfunc

func extgnbfcheck
	fetchdataforextgnbf
	ma extgnbf ExternalGNodeBFunction gNodeBId ^$gNodeBId$ 
	if $nr_of_mos = 0
		extgnbfcr
	else
		for $mo in extgnbf
			$extgnbfldn = ldn($mo)
		done
	fi
endfunc	

func mocheck
	ma enbf ^ENodeBFunction=
	for $mo in enbf
		$enbfldn = ldn($mo)
	done
	
	get $enbfldn enbid > $enbid
	
	ma gutranw ^GUtraNetwork=
	if $nr_of_mos = 0
		crn $enbfldn,GUtraNetwork=1
		end
	else
	for $mo in gutranw
		$gutranwldn = ldn($mo)
	done
	fi
endfunc

func writedata
	# $linecontent[1] = 				$enbid
	# $linecontent[2] = 				$xtwonotcreatedonenbside
	# $linecontent[3] =					$xtwoldn
	# $linecontent[4] =					$xtwoopstenbside
	
	!echo '$enbid' >>						$path/tmp/enbdata[$sequence].txt
	!echo '$xtwonotcreatedonenbside' >>		$path/tmp/enbdata[$sequence].txt
	!echo '$xtwoldn' >>						$path/tmp/enbdata[$sequence].txt
	!echo '$xtwoopstenbside' >>				$path/tmp/enbdata[$sequence].txt
endfunc

func getsequence
	$lineContent = readfile($path/tmp/sequence.txt)
	$sequence = $lineContent[1]
	$enodeb = $lineContent[2]
	$gnb = $lineContent[3]
endfunc

func contactind
	!echo 'ENB CONTACT OK' >> $path/tmp/enbcontactok[$sequence].txt
endfunc
	
func checkifenb
	pv $rats
	if $rats ~ L
		!echo 'LTE RAT FOUND' >> $path/tmp/lteratfound[$sequence].txt
	fi
endfunc

getsequence
contactind
checkifenb
mocheck
extgnbfcheck
xtwocheck
result
writedata